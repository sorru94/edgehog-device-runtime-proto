# Copyright 2025 SECO Mind Srl
# SPDX-License-Identifier: Apache-2.0

# Minimum CMake required
cmake_minimum_required(VERSION 3.15)

# Project definition
project(edgehog-device-runtime-proto VERSION 0.10.0 LANGUAGES CXX)

# Setup libraries
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")

option(BUILD_SHARED_LIBS "Build using shared libraries" ON)

# Project configuration
option(EDGEHOG_USE_SYSTEM_GRPC "Use system installed gRPC" OFF)
set(DEFAULT_PROTOBUF_VERSION "29.0.0" CACHE STRING "Default version of protobuf.")
set(DEFAULT_GRPC_VERSION "1.69.0" CACHE STRING "Default version of gRPC.")

if (EDGEHOG_USE_SYSTEM_GRPC)
    if(NOT DEFINED EDGEHOG_PROTOBUF_VERSION)
        set(EDGEHOG_PROTOBUF_VERSION "${DEFAULT_PROTOBUF_VERSION}" CACHE STRING "Version of proto buffer to use for Edgehog.")
        message(STATUS "EDGEHOG_PROTOBUF_VERSION was not set, defaulting to ${EDGEHOG_PROTOBUF_VERSION}")
    else()
        message(STATUS "EDGEHOG_PROTOBUF_VERSION set to ${EDGEHOG_PROTOBUF_VERSION}")
    endif()
endif()

if(NOT DEFINED EDGEHOG_GRPC_VERSION)
    set(EDGEHOG_GRPC_VERSION "${DEFAULT_GRPC_VERSION}" CACHE STRING "Version of gRPC to use for Edgehog.")
    message(STATUS "EDGEHOG_GRPC_VERSION was not set, defaulting to ${EDGEHOG_GRPC_VERSION}")
else()
    message(STATUS "EDGEHOG_GRPC_VERSION set to ${EDGEHOG_GRPC_VERSION}")
endif()

include(FetchContent)

# Required settings for windows
if(MSVC)
    add_definitions(-D_WIN32_WINNT=0x600)
endif()

# gRPC needs Threads
find_package(Threads REQUIRED)

if(EDGEHOG_USE_SYSTEM_GRPC)
    # Protobuf
    option(protobuf_MODULE_COMPATIBLE TRUE)
    find_package(Protobuf ${EDGEHOG_PROTOBUF_VERSION} CONFIG REQUIRED)
    message(STATUS "Using system protobuf ${protobuf_VERSION}")

    set(_PROTOBUF_LIBPROTOBUF protobuf::libprotobuf)
    set(_REFLECTION gRPC::grpc++_reflection)
    if(CMAKE_CROSSCOMPILING)
        find_program(_PROTOBUF_PROTOC protoc)
    else()
        set(_PROTOBUF_PROTOC $<TARGET_FILE:protobuf::protoc>)
    endif()

    # gRPC
    find_package(gRPC ${EDGEHOG_GRPC_VERSION} CONFIG REQUIRED)
    message(STATUS "Using system gRPC ${gRPC_VERSION}")

    set(_GRPC_CPP gRPC::grpc++)
    if(CMAKE_CROSSCOMPILING)
        find_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)
    else()
        set(_GRPC_CPP_PLUGIN_EXECUTABLE $<TARGET_FILE:gRPC::grpc_cpp_plugin>)
    endif()
else()
    # Enable installation of dependencies
    set(ABSL_ENABLE_INSTALL ON)
    set(ABSL_PROPAGATE_CXX_STD ON)

    # Fetch gRPC, includes Protobuf as a submodule
    Set(FETCHCONTENT_QUIET FALSE)
    message(STATUS "Using gRPC via add_subdirectory (FetchContent).")
    FetchContent_Declare(
      grpc
      GIT_REPOSITORY https://github.com/grpc/grpc.git
      GIT_TAG        "v${EDGEHOG_GRPC_VERSION}"
      GIT_SHALLOW    TRUE
      GIT_PROGRESS   TRUE
      GIT_CONFIG     fetch.parallel=0 submodule.fetchJobs=0
    )
    FetchContent_MakeAvailable(grpc)

    message(STATUS "Fetched gRPC source directory: ${grpc_SOURCE_DIR}")

    # Since FetchContent uses add_subdirectory under the hood, we can use
    # the grpc targets directly from this build.
    set(_PROTOBUF_LIBPROTOBUF libprotobuf)
    set(_REFLECTION grpc++_reflection)
    set(_PROTOBUF_PROTOC $<TARGET_FILE:protoc>)
    set(_GRPC_CPP grpc++)
    if(CMAKE_CROSSCOMPILING)
        find_program(_GRPC_CPP_PLUGIN_EXECUTABLE grpc_cpp_plugin)
    else()
        set(_GRPC_CPP_PLUGIN_EXECUTABLE $<TARGET_FILE:grpc_cpp_plugin>)
    endif()

    # Define the include folder for standard protobuf types (any.proto, etc.)
    set(_PROTOBUF_STANDARD_INCLUDE_DIR "${grpc_SOURCE_DIR}/third_party/protobuf/src")
    message(STATUS "Protobuf std include directory (for protoc): ${_PROTOBUF_STANDARD_INCLUDE_DIR}")
endif()

# Define where generated files will go relative to the binary directory
set(_PROTO_GENERATED_OUTPUT_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated")
file(MAKE_DIRECTORY "${_PROTO_GENERATED_OUTPUT_DIR}")
message(STATUS "Generated files output directory: ${_PROTO_GENERATED_OUTPUT_DIR}")

# Directory containing proto files (default to ../proto relative to this file)
if(NOT DEFINED PROTO_FOLDER)
    set(PROTO_FOLDER "${CMAKE_CURRENT_LIST_DIR}/../proto")
endif()
message(STATUS "Proto files source directory: ${PROTO_FOLDER}")

# Collect all .proto files
file(GLOB_RECURSE proto_files "${PROTO_FOLDER}/edgehog/deviceruntime/containers/v1/*.proto")
if(NOT proto_files)
    message(FATAL_ERROR "No .proto files found in ${PROTO_FOLDER}/edgehog/deviceruntime/containers/v1/")
endif()

set(_proto_generated_sources)
set(_proto_generated_headers)

# Compile all .proto files
foreach(proto_file ${proto_files})
    get_filename_component(proto_dir ${proto_file} DIRECTORY)
    get_filename_component(proto_name ${proto_file} NAME_WE)
    file(RELATIVE_PATH proto_rel_dir "${PROTO_FOLDER}" "${proto_dir}")

    set(out_proto_src "${_PROTO_GENERATED_OUTPUT_DIR}/${proto_rel_dir}/${proto_name}.pb.cc")
    set(out_proto_hdr "${_PROTO_GENERATED_OUTPUT_DIR}/${proto_rel_dir}/${proto_name}.pb.h")
    set(out_grpc_src "${_PROTO_GENERATED_OUTPUT_DIR}/${proto_rel_dir}/${proto_name}.grpc.pb.cc")
    set(out_grpc_hdr "${_PROTO_GENERATED_OUTPUT_DIR}/${proto_rel_dir}/${proto_name}.grpc.pb.h")

    list(APPEND _proto_generated_sources ${out_proto_src} ${out_grpc_src})
    list(APPEND _proto_generated_headers ${out_proto_hdr} ${out_grpc_hdr})

    set(PROTOC_CMD_ARGS "")
    list(APPEND PROTOC_CMD_ARGS --grpc_out "${_PROTO_GENERATED_OUTPUT_DIR}")
    list(APPEND PROTOC_CMD_ARGS --cpp_out "${_PROTO_GENERATED_OUTPUT_DIR}")
    list(APPEND PROTOC_CMD_ARGS -I "${PROTO_FOLDER}")

    if(NOT EDGEHOG_USE_SYSTEM_GRPC)
        if(IS_DIRECTORY "${_PROTOBUF_STANDARD_INCLUDE_DIR}")
            list(APPEND PROTOC_CMD_ARGS -I "${_PROTOBUF_STANDARD_INCLUDE_DIR}")
        else()
            message(WARNING "Protobuf standard include directory (for protoc) NOT FOUND: ${_PROTOBUF_STANDARD_INCLUDE_DIR}. Standard imports in .proto files might fail.")
        endif()
    endif()

    list(APPEND PROTOC_CMD_ARGS --plugin=protoc-gen-grpc="${_GRPC_CPP_PLUGIN_EXECUTABLE}")
    list(APPEND PROTOC_CMD_ARGS "${proto_file}")

    add_custom_command(
        OUTPUT "${out_proto_src}" "${out_proto_hdr}" "${out_grpc_src}" "${out_grpc_hdr}"
        COMMAND ${_PROTOBUF_PROTOC}
        ARGS ${PROTOC_CMD_ARGS}
        DEPENDS "${proto_file}"
                "${_PROTOBUF_PROTOC}"
                "${_GRPC_CPP_PLUGIN_EXECUTABLE}"
        COMMENT "Generating C++ and gRPC files from ${proto_name}.proto"
    )
endforeach()

add_library(edgehog_runtime_proto ${_proto_generated_sources})
target_compile_features(edgehog_runtime_proto PUBLIC cxx_std_17)

# Link the library against required dependencies (gRPC, Protobuf, Threads).
target_link_libraries(edgehog_runtime_proto
    PUBLIC
        ${_GRPC_CPP}
        ${_REFLECTION}
        ${_PROTOBUF_LIBPROTOBUF}
)

# Add include directories for the generated headers and the original proto source directory
target_include_directories(edgehog_runtime_proto
    PRIVATE
        "${_PROTO_GENERATED_OUTPUT_DIR}" # For compiling this library's sources
    PUBLIC
        # For consumers building alongside this project (e.g., via FetchContent)
        "$<BUILD_INTERFACE:${_PROTO_GENERATED_OUTPUT_DIR}>"
)

set_target_properties(edgehog_runtime_proto
    PROPERTIES
        PUBLIC_HEADER "$<BUILD_INTERFACE:${_PROTO_GENERATED_OUTPUT_DIR}>"
        POSITION_INDEPENDENT_CODE ${BUILD_SHARED_LIBS}
)


include(GNUInstallDirs)

install(
    TARGETS edgehog_runtime_proto
    EXPORT edgehog_runtime_proto
    LIBRARY
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE
        DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME
        DESTINATION ${CMAKE_INSTALL_BINDIR}
    PUBLIC_HEADER
        DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/edgehog_runtime_proto
)

# create pkg-conf .pc for importing projects
set(PC_NAME "edgehog_runtime_proto")
set(PC_DESCRIPTION "Edgerhog device runtime proto")
set(PC_VERSION ${PROJECT_VERSION})
set(PC_REQUIRES "grpc++ protobuf")
set(PC_REQUIRES_PRIVATE "")
set(PC_LIB "-ledgehog_runtime_proto")
set(PC_LIBS_PRIVATE "")
configure_file(
    pkg-config-template.pc.in
    edgehog_runtime_proto.pc
    @ONLY
)

install(FILES ${CMAKE_CURRENT_BINARY_DIR}/edgehog_runtime_proto.pc  DESTINATION lib/pkgconfig)
