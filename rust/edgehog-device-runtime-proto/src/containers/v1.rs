// This file is @generated by prost-build.
/// Request to list containers.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ListRequest {
    /// Amount of information to send in the response
    #[prost(enumeration = "ListInfo", optional, tag = "1")]
    pub list_info: ::core::option::Option<i32>,
    /// Optional: Filter containers by a specific status
    #[prost(enumeration = "ContainerState", repeated, tag = "2")]
    pub container_state_filter: ::prost::alloc::vec::Vec<i32>,
}
/// Response containing a list of containers.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListResponse {
    /// Information required with the ListInfo enum in the request.
    ///
    /// If unspecified the summary is returned.
    #[prost(oneof = "list_response::Info", tags = "1, 2, 3")]
    pub info: ::core::option::Option<list_response::Info>,
}
/// Nested message and enum types in `ListResponse`.
pub mod list_response {
    /// Information required with the ListInfo enum in the request.
    ///
    /// If unspecified the summary is returned.
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Info {
        /// Ids of the containers
        #[prost(message, tag = "1")]
        Ids(super::ListInfoIds),
        /// Summary information for the containers.
        #[prost(message, tag = "2")]
        Summary(super::ListInfoSummary),
        /// Full container information.
        #[prost(message, tag = "3")]
        Full(super::ListInfoFull),
    }
}
/// / List of the container ids.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInfoIds {
    /// / List of the ids
    #[prost(message, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<ContainerId>,
}
/// / The id of a container.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ContainerId {
    /// Edgehog ID of the container
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// Container ID from the container runtime.
    #[prost(string, optional, tag = "2")]
    pub container_id: ::core::option::Option<::prost::alloc::string::String>,
}
/// / Summary information of the containers.
///
/// This information is less expensive than the full information request.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInfoSummary {
    /// / Container information.
    #[prost(message, repeated, tag = "1")]
    pub containers: ::prost::alloc::vec::Vec<ContainerSummary>,
}
/// / Full information of the containers.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListInfoFull {
    #[prost(message, repeated, tag = "1")]
    pub containers: ::prost::alloc::vec::Vec<Container>,
}
/// Request to get details of a single container.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GetRequest {
    /// The Edgehog ID of the container to retrieve.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
/// Response containing details of a single container.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetResponse {
    /// The requested container object.
    #[prost(message, optional, tag = "1")]
    pub container: ::core::option::Option<Container>,
}
/// Request to start a container.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StartRequest {
    /// The Edgehog ID of the container to start.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
/// Request to stop a container.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StopRequest {
    /// The Edgehog ID of the container to stop.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// The timeout in seconds to wait for the container to stop.
    #[prost(int32, optional, tag = "2")]
    pub timeout_seconds: ::core::option::Option<i32>,
}
/// Request to stream container statistics.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StatsRequest {
    /// The Edgehog ID of the containers to get statistics for.
    ///
    /// If no ID is passed, all container telemetry is sent.
    #[prost(string, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Interval in seconds between stats updates.
    #[prost(int32, optional, tag = "2")]
    pub interval_seconds: ::core::option::Option<i32>,
    /// Limit the number of values to receive.
    #[prost(uint64, optional, tag = "3")]
    pub limit: ::core::option::Option<u64>,
}
/// A single stream of container statistics.
///
/// The 'pre' cpu fields is the previous read and are used to calculate the CPU usage in percentage.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatsResponse {
    /// ID of the container
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<ContainerId>,
    /// Date and time at which this sample was collected
    #[prost(message, optional, tag = "2")]
    pub read: ::core::option::Option<::prost_types::Timestamp>,
    /// Date and time at which the previous sample was collected
    #[prost(message, optional, tag = "3")]
    pub preread: ::core::option::Option<::prost_types::Timestamp>,
    /// Stats of a container's process-IDs (PIDs).
    #[prost(message, optional, tag = "4")]
    pub pids_stats: ::core::option::Option<PidsStats>,
    /// BlkioStats stores all IO service stats for data read and write
    #[prost(message, optional, tag = "5")]
    pub blkio_stats: ::core::option::Option<BlkioStats>,
    /// CPU related info of the container
    #[prost(message, optional, tag = "6")]
    pub cpu_stats: ::core::option::Option<CpuStats>,
    /// CPU related info of the container
    ///
    /// This is the previous read value. It's used to calculate the cpu usage in percentage since the
    /// delta of the current and previous CPU usage is required.
    #[prost(message, optional, tag = "7")]
    pub precpu_stats: ::core::option::Option<CpuStats>,
    /// Aggregates all memory stats since container inception.
    #[prost(message, optional, tag = "8")]
    pub memory_stats: ::core::option::Option<MemoryStats>,
    /// Network statistics for the container per interface.
    #[prost(map = "string, message", tag = "9")]
    pub networks: ::std::collections::HashMap<::prost::alloc::string::String, NetworkStats>,
}
/// Stats of a container's process-IDs (PIDs).
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PidsStats {
    /// Current is the number of PIDs in the cgroup.
    #[prost(uint64, optional, tag = "1")]
    pub current: ::core::option::Option<u64>,
    /// Limit is the hard limit on the number of pids in the cgroup. A "Limit" of 0 means that there is no limit.
    #[prost(uint64, optional, tag = "2")]
    pub limit: ::core::option::Option<u64>,
}
/// BlkioStats stores all IO service stats for data read and write.
///
/// Those are passed from the linux kernel and are statistics of writes and reads on block devices.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlkioStats {
    /// Available on hosts with cgroups v2
    #[prost(message, repeated, tag = "1")]
    pub io_service_bytes_recursive: ::prost::alloc::vec::Vec<BlkioValue>,
    /// Available on hosts with cgroups v1
    #[prost(message, repeated, tag = "2")]
    pub io_serviced_recursive: ::prost::alloc::vec::Vec<BlkioValue>,
    /// Available on hosts with cgroups v1
    #[prost(message, repeated, tag = "3")]
    pub io_queue_recursive: ::prost::alloc::vec::Vec<BlkioValue>,
    /// Available on hosts with cgroups v1
    #[prost(message, repeated, tag = "4")]
    pub io_service_time_recursive: ::prost::alloc::vec::Vec<BlkioValue>,
    /// Available on hosts with cgroups v1
    #[prost(message, repeated, tag = "5")]
    pub io_wait_time_recursive: ::prost::alloc::vec::Vec<BlkioValue>,
    /// Available on hosts with cgroups v1
    #[prost(message, repeated, tag = "6")]
    pub io_merged_recursive: ::prost::alloc::vec::Vec<BlkioValue>,
    /// Available on hosts with cgroups v1
    #[prost(message, repeated, tag = "7")]
    pub io_time_recursive: ::prost::alloc::vec::Vec<BlkioValue>,
    /// Available on hosts with cgroups v1
    #[prost(message, repeated, tag = "8")]
    pub sectors_recursive: ::prost::alloc::vec::Vec<BlkioValue>,
}
/// Operation on a block device
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BlkioValue {
    /// Device type major
    #[prost(uint64, optional, tag = "1")]
    pub major: ::core::option::Option<u64>,
    /// Device type minor
    #[prost(uint64, optional, tag = "2")]
    pub minor: ::core::option::Option<u64>,
    /// Operation on the device
    #[prost(string, optional, tag = "3")]
    pub op: ::core::option::Option<::prost::alloc::string::String>,
    /// Value of the operation
    #[prost(uint64, optional, tag = "4")]
    pub value: ::core::option::Option<u64>,
}
/// CPU related info of the container
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CpuStats {
    /// All CPU stats aggregated since container inception.
    #[prost(message, optional, tag = "1")]
    pub cpu_usage: ::core::option::Option<CpuUsage>,
    /// Full system system cpu usage.
    ///
    /// It's used to calculate the CPU usage in percentage.
    #[prost(uint64, optional, tag = "2")]
    pub system_cpu_usage: ::core::option::Option<u64>,
    /// Number of online CPUs.
    #[prost(uint32, optional, tag = "3")]
    pub online_cpus: ::core::option::Option<u32>,
    /// CPU throttling stats of the container.
    #[prost(message, optional, tag = "4")]
    pub throttling_data: ::core::option::Option<CpuThrottlingData>,
}
/// All CPU stats aggregated since container inception
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CpuUsage {
    /// Total CPU time consumed in nanoseconds
    #[prost(uint64, optional, tag = "1")]
    pub total_usage: ::core::option::Option<u64>,
    /// Total CPU time (in nanoseconds) consumed per core.
    ///
    /// This field is Linux-specific when using cgroups v1. It is omitted when using cgroups v2.
    #[prost(uint64, repeated, tag = "2")]
    pub percpu_usage: ::prost::alloc::vec::Vec<u64>,
    /// Time (in nanoseconds) spent by tasks of the cgroup in kernel mode
    #[prost(uint64, optional, tag = "3")]
    pub usage_in_kernelmode: ::core::option::Option<u64>,
    /// Time (in nanoseconds) spent by tasks of the cgroup in user mode
    #[prost(uint64, optional, tag = "4")]
    pub usage_in_usermode: ::core::option::Option<u64>,
}
/// CPU throttling stats of the container.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CpuThrottlingData {
    /// Number of periods with throttling active.
    #[prost(uint64, optional, tag = "1")]
    pub periods: ::core::option::Option<u64>,
    /// Number of periods when the container hit its throttling limit.
    #[prost(uint64, optional, tag = "2")]
    pub throttled_periods: ::core::option::Option<u64>,
    /// Aggregated time (in nanoseconds) the container was throttled for.
    #[prost(uint64, optional, tag = "3")]
    pub throttled_time: ::core::option::Option<u64>,
}
/// Aggregates all memory stats since container inception
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MemoryStats {
    /// Current res_counter usage for memory.
    #[prost(uint64, optional, tag = "1")]
    pub usage: ::core::option::Option<u64>,
    /// Maximum usage ever recorded.
    ///
    /// This field is Linux-specific and only supported on cgroups v1.
    #[prost(uint64, optional, tag = "2")]
    pub max_usage: ::core::option::Option<u64>,
    /// All the stats exported via memory.stat. when using cgroups v2.
    #[prost(map = "string, uint64", tag = "3")]
    pub stats: ::std::collections::HashMap<::prost::alloc::string::String, u64>,
    /// Number of times memory usage hits limits.
    ///
    /// This field is Linux-specific and only supported on cgroups v1.
    #[prost(uint64, optional, tag = "4")]
    pub failcnt: ::core::option::Option<u64>,
    /// Memory limit.
    #[prost(uint64, optional, tag = "5")]
    pub limit: ::core::option::Option<u64>,
}
/// Aggregates the network stats of one container
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NetworkStats {
    /// Bytes received.
    #[prost(uint64, optional, tag = "1")]
    pub rx_bytes: ::core::option::Option<u64>,
    /// Packets received.
    #[prost(uint64, optional, tag = "3")]
    pub rx_packets: ::core::option::Option<u64>,
    /// Received errors.
    #[prost(uint64, optional, tag = "5")]
    pub rx_errors: ::core::option::Option<u64>,
    /// Incoming packets dropped.
    #[prost(uint64, optional, tag = "7")]
    pub rx_dropped: ::core::option::Option<u64>,
    /// Bytes sent.
    #[prost(uint64, optional, tag = "2")]
    pub tx_bytes: ::core::option::Option<u64>,
    /// Packets sent.
    #[prost(uint64, optional, tag = "4")]
    pub tx_packets: ::core::option::Option<u64>,
    /// Sent errors.
    #[prost(uint64, optional, tag = "6")]
    pub tx_errors: ::core::option::Option<u64>,
    /// Outgoing packets dropped.
    #[prost(uint64, optional, tag = "8")]
    pub tx_dropped: ::core::option::Option<u64>,
}
/// Container summary information returned when listing
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContainerSummary {
    /// ID of the container
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<ContainerId>,
    /// Date and time at which the container was created.
    #[prost(message, optional, tag = "2")]
    pub created: ::core::option::Option<::prost_types::Timestamp>,
    /// The ID (digest) of the image that this container was created from.
    #[prost(string, tag = "3")]
    pub image: ::prost::alloc::string::String,
    /// Representation of the container state.
    #[prost(enumeration = "ContainerState", tag = "4")]
    pub state: i32,
    /// Port-mappings for the container.
    #[prost(message, repeated, tag = "5")]
    pub ports: ::prost::alloc::vec::Vec<PortMapping>,
}
/// Container information
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Container {
    /// ID of the container
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<ContainerId>,
    /// Date and time at which the container was created.
    #[prost(message, optional, tag = "2")]
    pub created: ::core::option::Option<::prost_types::Timestamp>,
    /// The ID (digest) of the image that this container was created from.
    #[prost(string, tag = "3")]
    pub image: ::prost::alloc::string::String,
    /// Representation of the container state.
    #[prost(enumeration = "ContainerState", tag = "4")]
    pub state: i32,
    /// Number of times the container was restarted since it was created, or since daemon was started.
    #[prost(uint32, tag = "5")]
    pub restart_count: u32,
    /// Port-mappings for the container.
    #[prost(message, repeated, tag = "6")]
    pub ports: ::prost::alloc::vec::Vec<PortMapping>,
}
/// Port-mapping for the container
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PortMapping {
    /// Host IP address that the container's port is mapped to.
    #[prost(string, optional, tag = "1")]
    pub ip: ::core::option::Option<::prost::alloc::string::String>,
    /// Port on the container
    #[prost(uint32, tag = "2")]
    pub private_port: u32,
    /// Port exposed on the host
    #[prost(uint32, optional, tag = "3")]
    pub public_port: ::core::option::Option<u32>,
    /// Protocol of the port: "tcp", "udp", "sctp", ...
    #[prost(enumeration = "PortType", tag = "4")]
    pub protocol: i32,
}
/// The state of this container.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ListInfo {
    /// Return the default
    Unspecified = 0,
    /// Return only the container ids
    Ids = 1,
    /// Return a summary of the information
    Summary = 2,
    /// Return the full information.
    Full = 3,
}
impl ListInfo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "LIST_INFO_UNSPECIFIED",
            Self::Ids => "LIST_INFO_IDS",
            Self::Summary => "LIST_INFO_SUMMARY",
            Self::Full => "LIST_INFO_FULL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LIST_INFO_UNSPECIFIED" => Some(Self::Unspecified),
            "LIST_INFO_IDS" => Some(Self::Ids),
            "LIST_INFO_SUMMARY" => Some(Self::Summary),
            "LIST_INFO_FULL" => Some(Self::Full),
            _ => None,
        }
    }
}
/// The state of this container.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContainerState {
    Unspecified = 0,
    Created = 1,
    Running = 2,
    Paused = 3,
    Restarting = 4,
    Removing = 5,
    Exited = 6,
    Dead = 7,
}
impl ContainerState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "CONTAINER_STATE_UNSPECIFIED",
            Self::Created => "CONTAINER_STATE_CREATED",
            Self::Running => "CONTAINER_STATE_RUNNING",
            Self::Paused => "CONTAINER_STATE_PAUSED",
            Self::Restarting => "CONTAINER_STATE_RESTARTING",
            Self::Removing => "CONTAINER_STATE_REMOVING",
            Self::Exited => "CONTAINER_STATE_EXITED",
            Self::Dead => "CONTAINER_STATE_DEAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CONTAINER_STATE_UNSPECIFIED" => Some(Self::Unspecified),
            "CONTAINER_STATE_CREATED" => Some(Self::Created),
            "CONTAINER_STATE_RUNNING" => Some(Self::Running),
            "CONTAINER_STATE_PAUSED" => Some(Self::Paused),
            "CONTAINER_STATE_RESTARTING" => Some(Self::Restarting),
            "CONTAINER_STATE_REMOVING" => Some(Self::Removing),
            "CONTAINER_STATE_EXITED" => Some(Self::Exited),
            "CONTAINER_STATE_DEAD" => Some(Self::Dead),
            _ => None,
        }
    }
}
/// Protocol of a port
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PortType {
    Unspecified = 0,
    Tcp = 1,
    Udp = 2,
    Sctp = 3,
}
impl PortType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "PORT_TYPE_UNSPECIFIED",
            Self::Tcp => "PORT_TYPE_TCP",
            Self::Udp => "PORT_TYPE_UDP",
            Self::Sctp => "PORT_TYPE_SCTP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PORT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PORT_TYPE_TCP" => Some(Self::Tcp),
            "PORT_TYPE_UDP" => Some(Self::Udp),
            "PORT_TYPE_SCTP" => Some(Self::Sctp),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod containers_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// Service for managing containers on a device.
    #[derive(Debug, Clone)]
    pub struct ContainersServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl ContainersServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> ContainersServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ContainersServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ContainersServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// List all containers.
        pub async fn list(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRequest>,
        ) -> std::result::Result<tonic::Response<super::ListResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.ContainersService/List",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "edgehog.deviceruntime.containers.v1.ContainersService",
                "List",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Get details of a specific container.
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.ContainersService/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "edgehog.deviceruntime.containers.v1.ContainersService",
                "Get",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Start a container.
        pub async fn start(
            &mut self,
            request: impl tonic::IntoRequest<super::StartRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.ContainersService/Start",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "edgehog.deviceruntime.containers.v1.ContainersService",
                "Start",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Stop a container.
        pub async fn stop(
            &mut self,
            request: impl tonic::IntoRequest<super::StopRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.ContainersService/Stop",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "edgehog.deviceruntime.containers.v1.ContainersService",
                "Stop",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Stream container statistics.
        pub async fn stats(
            &mut self,
            request: impl tonic::IntoRequest<super::StatsRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::StatsResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/edgehog.deviceruntime.containers.v1.ContainersService/Stats",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "edgehog.deviceruntime.containers.v1.ContainersService",
                "Stats",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod containers_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ContainersServiceServer.
    #[async_trait]
    pub trait ContainersService: std::marker::Send + std::marker::Sync + 'static {
        /// List all containers.
        async fn list(
            &self,
            request: tonic::Request<super::ListRequest>,
        ) -> std::result::Result<tonic::Response<super::ListResponse>, tonic::Status>;
        /// Get details of a specific container.
        async fn get(
            &self,
            request: tonic::Request<super::GetRequest>,
        ) -> std::result::Result<tonic::Response<super::GetResponse>, tonic::Status>;
        /// Start a container.
        async fn start(
            &self,
            request: tonic::Request<super::StartRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// Stop a container.
        async fn stop(
            &self,
            request: tonic::Request<super::StopRequest>,
        ) -> std::result::Result<tonic::Response<()>, tonic::Status>;
        /// Server streaming response type for the Stats method.
        type StatsStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::StatsResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Stream container statistics.
        async fn stats(
            &self,
            request: tonic::Request<super::StatsRequest>,
        ) -> std::result::Result<tonic::Response<Self::StatsStream>, tonic::Status>;
    }
    /// Service for managing containers on a device.
    #[derive(Debug)]
    pub struct ContainersServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ContainersServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ContainersServiceServer<T>
    where
        T: ContainersService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/edgehog.deviceruntime.containers.v1.ContainersService/List" => {
                    #[allow(non_camel_case_types)]
                    struct ListSvc<T: ContainersService>(pub Arc<T>);
                    impl<T: ContainersService> tonic::server::UnaryService<super::ListRequest> for ListSvc<T> {
                        type Response = super::ListResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ContainersService>::list(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/edgehog.deviceruntime.containers.v1.ContainersService/Get" => {
                    #[allow(non_camel_case_types)]
                    struct GetSvc<T: ContainersService>(pub Arc<T>);
                    impl<T: ContainersService> tonic::server::UnaryService<super::GetRequest> for GetSvc<T> {
                        type Response = super::GetResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as ContainersService>::get(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/edgehog.deviceruntime.containers.v1.ContainersService/Start" => {
                    #[allow(non_camel_case_types)]
                    struct StartSvc<T: ContainersService>(pub Arc<T>);
                    impl<T: ContainersService> tonic::server::UnaryService<super::StartRequest> for StartSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StartRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ContainersService>::start(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StartSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/edgehog.deviceruntime.containers.v1.ContainersService/Stop" => {
                    #[allow(non_camel_case_types)]
                    struct StopSvc<T: ContainersService>(pub Arc<T>);
                    impl<T: ContainersService> tonic::server::UnaryService<super::StopRequest> for StopSvc<T> {
                        type Response = ();
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StopRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ContainersService>::stop(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StopSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/edgehog.deviceruntime.containers.v1.ContainersService/Stats" => {
                    #[allow(non_camel_case_types)]
                    struct StatsSvc<T: ContainersService>(pub Arc<T>);
                    impl<T: ContainersService>
                        tonic::server::ServerStreamingService<super::StatsRequest> for StatsSvc<T>
                    {
                        type Response = super::StatsResponse;
                        type ResponseStream = T::StatsStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::StatsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ContainersService>::stats(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StatsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for ContainersServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "edgehog.deviceruntime.containers.v1.ContainersService";
    impl<T> tonic::server::NamedService for ContainersServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
